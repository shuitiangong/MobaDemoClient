// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomPB.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ProtoMsg {

  #region Messages
  public sealed class RoomSelectHeroC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomSelectHeroC2S> _parser = new pb::MessageParser<RoomSelectHeroC2S>(() => new RoomSelectHeroC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSelectHeroC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private int heroID_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomSelectHeroS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomSelectHeroS2C> _parser = new pb::MessageParser<RoomSelectHeroS2C>(() => new RoomSelectHeroS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSelectHeroS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "RolesID" field.</summary>
    public const int RolesIDFieldNumber = 1;
    private int rolesID_;
    /// <summary>
    ///选择英雄的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RolesID {
      get { return rolesID_; }
      set {
        rolesID_ = value;
      }
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 2;
    private int heroID_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RolesID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RolesID);
      }
      if (HeroID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RolesID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolesID);
      }
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RolesID = input.ReadInt32();
            break;
          }
          case 16: {
            HeroID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomSelectHeroSkillC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomSelectHeroSkillC2S> _parser = new pb::MessageParser<RoomSelectHeroSkillC2S>(() => new RoomSelectHeroSkillC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSelectHeroSkillC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 1;
    private int skillID_;
    /// <summary>
    ///技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "GridID" field.</summary>
    public const int GridIDFieldNumber = 2;
    private int gridID_;
    /// <summary>
    ///格子ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridID {
      get { return gridID_; }
      set {
        gridID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillID);
      }
      if (GridID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (GridID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillID = input.ReadInt32();
            break;
          }
          case 16: {
            GridID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomSelectHeroSkillS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomSelectHeroSkillS2C> _parser = new pb::MessageParser<RoomSelectHeroSkillS2C>(() => new RoomSelectHeroSkillS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSelectHeroSkillS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "RolesID" field.</summary>
    public const int RolesIDFieldNumber = 1;
    private int rolesID_;
    /// <summary>
    ///选择英雄的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RolesID {
      get { return rolesID_; }
      set {
        rolesID_ = value;
      }
    }

    /// <summary>Field number for the "GridID" field.</summary>
    public const int GridIDFieldNumber = 2;
    private int gridID_;
    /// <summary>
    ///格子ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GridID {
      get { return gridID_; }
      set {
        gridID_ = value;
      }
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 3;
    private int skillID_;
    /// <summary>
    ///技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RolesID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RolesID);
      }
      if (GridID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GridID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RolesID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolesID);
      }
      if (GridID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GridID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RolesID = input.ReadInt32();
            break;
          }
          case 16: {
            GridID = input.ReadInt32();
            break;
          }
          case 24: {
            SkillID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomCreateC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomCreateC2S> _parser = new pb::MessageParser<RoomCreateC2S>(() => new RoomCreateC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCreateC2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class RoomCreateS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomCreateS2C> _parser = new pb::MessageParser<RoomCreateS2C>(() => new RoomCreateS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCreateS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "RoomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::ProtoMsg.RoomInfo roomInfo_;
    /// <summary>
    ///房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMsg.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::ProtoMsg.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed class RoomCloseC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomCloseC2S> _parser = new pb::MessageParser<RoomCloseC2S>(() => new RoomCloseC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCloseC2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class RoomCloseS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomCloseS2C> _parser = new pb::MessageParser<RoomCloseS2C>(() => new RoomCloseS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCloseS2C> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class RoomSendMsgC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomSendMsgC2S> _parser = new pb::MessageParser<RoomSendMsgC2S>(() => new RoomSendMsgC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSendMsgC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    /// <summary>
    ///要发送的内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomSendMsgS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomSendMsgS2C> _parser = new pb::MessageParser<RoomSendMsgS2C>(() => new RoomSendMsgS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSendMsgS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "RolesID" field.</summary>
    public const int RolesIDFieldNumber = 1;
    private int rolesID_;
    /// <summary>
    ///发送的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RolesID {
      get { return rolesID_; }
      set {
        rolesID_ = value;
      }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    /// <summary>
    ///要发送的内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RolesID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RolesID);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RolesID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolesID);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RolesID = input.ReadInt32();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomLockHeroC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomLockHeroC2S> _parser = new pb::MessageParser<RoomLockHeroC2S>(() => new RoomLockHeroC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomLockHeroC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private int heroID_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomLockHeroS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomLockHeroS2C> _parser = new pb::MessageParser<RoomLockHeroS2C>(() => new RoomLockHeroS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomLockHeroS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "RolesID" field.</summary>
    public const int RolesIDFieldNumber = 1;
    private int rolesID_;
    /// <summary>
    ///发送的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RolesID {
      get { return rolesID_; }
      set {
        rolesID_ = value;
      }
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 2;
    private int heroID_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RolesID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RolesID);
      }
      if (HeroID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RolesID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RolesID);
      }
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RolesID = input.ReadInt32();
            break;
          }
          case 16: {
            HeroID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomLoadProgressC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomLoadProgressC2S> _parser = new pb::MessageParser<RoomLoadProgressC2S>(() => new RoomLoadProgressC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomLoadProgressC2S> Parser { get { return _parser; } }

    /// <summary>Field number for the "LoadProgress" field.</summary>
    public const int LoadProgressFieldNumber = 1;
    private int loadProgress_;
    /// <summary>
    ///当前的加载进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoadProgress {
      get { return loadProgress_; }
      set {
        loadProgress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoadProgress != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LoadProgress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoadProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoadProgress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LoadProgress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoomLoadProgressS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomLoadProgressS2C> _parser = new pb::MessageParser<RoomLoadProgressS2C>(() => new RoomLoadProgressS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomLoadProgressS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "IsBattleStart" field.</summary>
    public const int IsBattleStartFieldNumber = 1;
    private bool isBattleStart_;
    /// <summary>
    ///是否开始战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBattleStart {
      get { return isBattleStart_; }
      set {
        isBattleStart_ = value;
      }
    }

    /// <summary>Field number for the "RolesID" field.</summary>
    public const int RolesIDFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_rolesID_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> rolesID_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///全部角色,0-4索引表示A队伍 5-9的索引表示B队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RolesID {
      get { return rolesID_; }
    }

    /// <summary>Field number for the "LoadProgress" field.</summary>
    public const int LoadProgressFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_loadProgress_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> loadProgress_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///全部角色当前的加载进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LoadProgress {
      get { return loadProgress_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBattleStart != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBattleStart);
      }
      rolesID_.WriteTo(output, _repeated_rolesID_codec);
      loadProgress_.WriteTo(output, _repeated_loadProgress_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBattleStart != false) {
        size += 1 + 1;
      }
      size += rolesID_.CalculateSize(_repeated_rolesID_codec);
      size += loadProgress_.CalculateSize(_repeated_loadProgress_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsBattleStart = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            rolesID_.AddEntriesFrom(input, _repeated_rolesID_codec);
            break;
          }
          case 26:
          case 24: {
            loadProgress_.AddEntriesFrom(input, _repeated_loadProgress_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoomToBattleC2S : pb::IMessage {
    private static readonly pb::MessageParser<RoomToBattleC2S> _parser = new pb::MessageParser<RoomToBattleC2S>(() => new RoomToBattleC2S());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomToBattleC2S> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class RoomToBattleS2C : pb::IMessage {
    private static readonly pb::MessageParser<RoomToBattleS2C> _parser = new pb::MessageParser<RoomToBattleS2C>(() => new RoomToBattleS2C());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomToBattleS2C> Parser { get { return _parser; } }

    /// <summary>Field number for the "PlayerList" field.</summary>
    public const int PlayerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ProtoMsg.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(10, global::ProtoMsg.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoMsg.PlayerInfo> playerList_ = new pbc::RepeatedField<global::ProtoMsg.PlayerInfo>();
    /// <summary>
    ///玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoMsg.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerList_.WriteTo(output, _repeated_playerList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
